import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class AES {
    private static String keyString;
    private static String plaintext;



    public static final int[][] table_mc2 = {
        {0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e},
        {0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e},
        {0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e},
        {0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e},
        {0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e},
        {0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe},
        {0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde},
        {0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe},
        {0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05},
        {0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25},
        {0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45},
        {0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65},
        {0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85},
        {0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5},
        {0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5},
        {0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5}
    };


    public static final int[][] table_mc3 = {
            {0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11},
            {0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21},
            {0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71},
            {0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41},
            {0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1},
            {0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1},
            {0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1},
            {0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81},
            {0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a},
            {0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba},
            {0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea},
            {0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda},
            {0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a},
            {0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a},
            {0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a},
            {0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a}
    };


    public static int[][] Xor(int[][] a, int[][] b){
        int[][] result = new int[a.length][a.length];
        for(int i=0; i< a.length; i++){
            for(int j=0; j<a.length; j++){
                result[i][j] = a[i][j] ^ b[i][j];
            }
        }
        return result;
    }

    public static int[][] subWord(int[][] word, int[][] sBox){
        for(int i=0; i< word.length; i++){
            for(int j=0; j<word.length; j++){
                String hex = Integer.toHexString(word[i][j]);
                int row = 0;
                int col = 0;
                if(hex.length() == 1){
                    col = Integer.parseInt(hex, 16);
                }
                if(hex.length() > 1){
                    String nibble1 = hex.substring(0, 1);
                    String nibble2 = hex.substring(1);
                    row = Integer.parseInt(nibble1, 16);
                    col = Integer.parseInt(nibble2, 16);
                }
                if(hex.length() > 2){
                    System.out.println("More than 2 hex-numbers in SubWord!");
                }
                word[i][j] = sBox[row][col];
            }
        }
        return word;
    }

    public static int[][] shiftRows(int[][] state){
        int[][] newState = new int[state.length][state.length];
        for(int i=0; i<state.length; i++){
            newState[0][i] = state[0][i];
        }
        for(int i=0; i<state.length-1; i++){
            newState[1][i] = state[1][i+1];
        }
        newState[1][state.length-1] = state[1][0];

        newState[2][0] = state[2][2];
        newState[2][1] = state[2][3];
        newState[2][2] = state[2][0];
        newState[2][3] = state[2][1];

        newState[3][0] = state[3][3];
        newState[3][1] = state[3][0];
        newState[3][2] = state[3][1];
        newState[3][3] = state[3][2];
        return newState;
    }

    public static int[][] MixColumns(int[][] state){
        int[][] T = new int[][]{{2, 3, 1, 1}, {1, 2, 3, 1}, {1, 1, 2, 3}, {3, 1, 1, 2}};
        int[] col1 = AESutils.getColumn(state,0);
        int[] col2 = AESutils.getColumn(state, 1);
        int[] col3 = AESutils.getColumn(state, 2);
        int[] col4 = AESutils.getColumn(state, 3);

        int[][] res = new int[4][4];

        for(int i=0; i<4; i++){
            for(int j=0; j<4; j++){
                int val = 0;

                //mchelper
                for(int k=0; k<4; k++){
                    int a = T[i][k];
                    int b = state[k][j];
                    val ^= mcCalc(a, b);
                }
                res[i][j] = val;
            }
        }
        return res;
    }


    private static int mcCalc(int a, int b) //Helper method for mcHelper
    {
        if (a == 1) {
            return b;
        } else if (a == 2) {
            return table_mc2[b / 16][b % 16];
        } else if (a == 3) {
            return table_mc3[b / 16][b % 16];
        }
        return 0;
    }




    public static int[][] encrypt(int[][] plain, int[][] key){
        int[][] T = new int[][]{{2, 3, 1, 1}, {1, 2, 3, 1}, {1, 1, 2, 3}, {3, 1, 1, 2}};
        int[][] sBox = AESutils.getSbox(false);
        int[][] roundKey = key;
        int keyRound = 0;

            // Initial addRoundKey
        int[][] state = Xor(plain, key);

        //-------------------------------------
        //------  9 rounds   ----
        for(int i=0; i<9; i++) {
                //1. subBytes
            state = subWord(state, sBox);
                //2. shiftRows
            state = shiftRows(state);
                //3. mixColumns
            //int[][] newMix = MixColumns(state);
            state = MixColumns(state);
                //4. addRoundKey
                roundKey = KeyManager.getNextKey(roundKey, keyRound);
            state = Xor(roundKey, state);
            keyRound++;
        }

        // ----    FINAL 10th ROUND  ---//
        state = subWord(state, sBox);
        state = shiftRows(state);
            roundKey = KeyManager.getNextKey(roundKey, 9);
        int[][] finalState = Xor(roundKey, state);

        return finalState;
    }


    public static void main(String[] args){
        //Scanner sc = new Scanner(System.in);
        Scanner sc;
        try{
            sc = new Scanner(new File("src/aes_sample.in"));
            String line = sc.nextLine();
            if(line.length() > 15){
                keyString = line.substring(0, 16);
            }
            StringBuilder stringBuilder;
            if(line.length() > 16){
                plaintext = line.substring(16);
                while(plaintext.length()%16 != 0){
                    System.out.println(plaintext.length());
                    plaintext += " ";
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        String plain = "ò\u0095¹1\u008B\u0099D4Ù=\u0098¤äI¯Ø";
        //String plain = "ò•¹1‹™D4Ù=˜¤äI¯Ø";
        String key = "ôÀ  ¡öý4?¬j~jàù";

        int[][] rKey = AESutils.stringToMatrix(key);
        int[][] block = AESutils.stringToMatrix(plain);

        int[][] cipher = encrypt(block, rKey);
        AESutils.printHexMatrix(cipher);
        AESutils.printMatrixtoHex(cipher);

    }
}
